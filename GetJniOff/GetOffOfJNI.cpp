/**
 *
 * Author: AngelToms
 */
#include "GetOffOfJNI.h"

std::string getMethodNameOfJavaVMByOffset(size_t offset) {
	int ptrsz = sizeof(size_t);
	int off = offset / ptrsz;
	switch(off) {
	case 0:
		return std::string("reserved0");
	case 1:
		return std::string("reserved1");
	case 2:
		return std::string("reserved2");
	case 3:
		return std::string("DestroyJavaVM");
	case 4:
		return std::string("AttachCurrentThread");
	case 5:
		return std::string("DetachCurrentThread");
	case 6:
		return std::string("GetEnv");
	case 7:
		return std::string("AttachCurrentThreadAsDaemon");
	default:
		return std::string("Not Find");
	}
}

std::string getMethodNameOfJNIEnvByOffset(size_t offset) {
	int ptrsz = sizeof(size_t);
	int off = offset / ptrsz;
	switch(off) {
	case 0:
		return std::string("reserved0");
	case 1:
		return std::string("reserved1");
	case 2:
		return std::string("reserved2");
	case 3:
		return std::string("reserved3");
	case 4:
		return std::string("GetVersion");
	case 5:
		return std::string("DefineClass");
	case 6:
		return std::string("FindClass");
	case 7:
		return std::string("FromReflectedMethod");
	case 8:
		return std::string("FromReflectedField");
	case 9:
		return std::string("ToReflectedMethod");
	case 10:
		return std::string("GetSuperclass");
	case 11:
		return std::string("IsAssignableFrom");
	case 12:
		return std::string("ToReflectedField");
	case 13:
		return std::string("Throw");
	case 14:
		return std::string("ThrowNew");
	case 15:
		return std::string("ExceptionOccurred");
	case 16:
		return std::string("ExceptionDescribe");
	case 17:
		return std::string("ExceptionClear");
	case 18:
		return std::string("FatalError");
	case 19:
		return std::string("PushLocalFrame");
	case 20:
		return std::string("PopLocalFrame");
	case 21:
		return std::string("NewGlobalRef");
	case 22:
		return std::string("DeleteGlobalRef");
	case 23:
		return std::string("DeleteLocalRef");
	case 24:
		return std::string("IsSameObject");
	case 25:
		return std::string("NewLocalRef");
	case 26:
		return std::string("EnsureLocalCapacity");
	case 27:
		return std::string("AllocObject");
	case 28:
		return std::string("NewObject");
	case 29:
		return std::string("NewObjectV");
	case 30:
		return std::string("NewObjectA");
	case 31:
		return std::string("GetObjectClass");
	case 32:
		return std::string("IsInstanceOf");
	case 33:
		return std::string("GetMethodID");
	case 34:
		return std::string("CallObjectMethod");
	case 35:
		return std::string("CallObjectMethodV");
	case 36:
		return std::string("CallObjectMethodA");
	case 37:
		return std::string("CallBooleanMethod");
	case 38:
		return std::string("CallBooleanMethodV");
	case 39:
		return std::string("CallBooleanMethodA");
	case 40:
		return std::string("CallByteMethod");
	case 41:
		return std::string("CallByteMethodV");
	case 42:
		return std::string("CallByteMethodA");
	case 43:
		return std::string("CallCharMethod");
	case 44:
		return std::string("CallCharMethodV");
	case 45:
		return std::string("CallCharMethodA");
	case 46:
		return std::string("CallShortMethod");
	case 47:
		return std::string("CallShortMethodV");
	case 48:
		return std::string("CallShortMethodA");
	case 49:
		return std::string("CallIntMethod");
	case 50:
		return std::string("CallIntMethodV");
	case 51:
		return std::string("CallIntMethodA");
	case 52:
		return std::string("CallLongMethod");
	case 53:
		return std::string("CallLongMethodV");
	case 54:
		return std::string("CallLongMethodA");
	case 55:
		return std::string("CallFloatMethod");
	case 56:
		return std::string("CallFloatMethodV");
	case 57:
		return std::string("CallFloatMethodA");
	case 58:
		return std::string("CallDoubleMethod");
	case 59:
		return std::string("CallDoubleMethodV");
	case 60:
		return std::string("CallDoubleMethodA");
	case 61:
		return std::string("CallVoidMethod");
	case 62:
		return std::string("CallVoidMethodV");
	case 63:
		return std::string("CallVoidMethodA");
	case 64:
		return std::string("CallNonvirtualObjectMethod");
	case 65:
		return std::string("CallNonvirtualObjectMethodV");
	case 66:
		return std::string("CallNonvirtualObjectMethodA");
	case 67:
		return std::string("CallNonvirtualBooleanMethod");
	case 68:
		return std::string("CallNonvirtualBooleanMethodV");
	case 69:
		return std::string("CallNonvirtualBooleanMethodA");
	case 70:
		return std::string("CallNonvirtualByteMethod");
	case 71:
		return std::string("CallNonvirtualByteMethodV");
	case 72:
		return std::string("CallNonvirtualByteMethodA");
	case 73:
		return std::string("CallNonvirtualCharMethod");
	case 74:
		return std::string("CallNonvirtualCharMethodV");
	case 75:
		return std::string("CallNonvirtualCharMethodA");
	case 76:
		return std::string("CallNonvirtualShortMethod");
	case 77:
		return std::string("CallNonvirtualShortMethodV");
	case 78:
		return std::string("CallNonvirtualShortMethodA");
	case 79:
		return std::string("CallNonvirtualIntMethod");
	case 80:
		return std::string("CallNonvirtualIntMethodV");
	case 81:
		return std::string("CallNonvirtualIntMethodA");
	case 82:
		return std::string("CallNonvirtualLongMethod");
	case 83:
		return std::string("CallNonvirtualLongMethodV");
	case 84:
		return std::string("CallNonvirtualLongMethodA");
	case 85:
		return std::string("CallNonvirtualFloatMethod");
	case 86:
		return std::string("CallNonvirtualFloatMethodV");
	case 87:
		return std::string("CallNonvirtualFloatMethodA");
	case 88:
		return std::string("CallNonvirtualDoubleMethod");
	case 89:
		return std::string("CallNonvirtualDoubleMethodV");
	case 90:
		return std::string("CallNonvirtualDoubleMethodA");
	case 91:
		return std::string("CallNonvirtualVoidMethod");
	case 92:
		return std::string("CallNonvirtualVoidMethodV");
	case 93:
		return std::string("CallNonvirtualVoidMethodA");
	case 94:
		return std::string("GetFieldID");
	case 95:
		return std::string("GetObjectField");
	case 96:
		return std::string("GetBooleanField");
	case 97:
		return std::string("GetByteField");
	case 98:
		return std::string("GetCharField");
	case 99:
		return std::string("GetShortField");
	case 100:
		return std::string("GetIntField");
	case 101:
		return std::string("GetLongField");
	case 102:
		return std::string("GetFloatField");
	case 103:
		return std::string("GetDoubleField");
	case 104:
		return std::string("SetObjectField");
	case 105:
		return std::string("SetBooleanField");
	case 106:
		return std::string("SetByteField");
	case 107:
		return std::string("SetCharField");
	case 108:
		return std::string("SetShortField");
	case 109:
		return std::string("SetIntField");
	case 110:
		return std::string("SetLongField");
	case 111:
		return std::string("SetFloatField");
	case 112:
		return std::string("SetDoubleField");
	case 113:
		return std::string("GetStaticMethodID");
	case 114:
		return std::string("CallStaticObjectMethod");
	case 115:
		return std::string("CallStaticObjectMethodV");
	case 116:
		return std::string("CallStaticObjectMethodA");
	case 117:
		return std::string("CallStaticBooleanMethod");
	case 118:
		return std::string("CallStaticBooleanMethodV");
	case 119:
		return std::string("CallStaticBooleanMethodA");
	case 120:
		return std::string("CallStaticByteMethod");
	case 121:
		return std::string("CallStaticByteMethodV");
	case 122:
		return std::string("CallStaticByteMethodA");
	case 123:
		return std::string("CallStaticCharMethod");
	case 124:
		return std::string("CallStaticCharMethodV");
	case 125:
		return std::string("CallStaticCharMethodA");
	case 126:
		return std::string("CallStaticShortMethod");
	case 127:
		return std::string("CallStaticShortMethodV");
	case 128:
		return std::string("CallStaticShortMethodA");
	case 129:
		return std::string("CallStaticIntMethod");
	case 130:
		return std::string("CallStaticIntMethodV");
	case 131:
		return std::string("CallStaticIntMethodA");
	case 132:
		return std::string("CallStaticLongMethod");
	case 133:
		return std::string("CallStaticLongMethodV");
	case 134:
		return std::string("CallStaticLongMethodA");
	case 135:
		return std::string("CallStaticFloatMethod");
	case 136:
		return std::string("CallStaticFloatMethodV");
	case 137:
		return std::string("CallStaticFloatMethodA");
	case 138:
		return std::string("CallStaticDoubleMethod");
	case 139:
		return std::string("CallStaticDoubleMethodV");
	case 140:
		return std::string("CallStaticDoubleMethodA");
	case 141:
		return std::string("CallStaticVoidMethod");
	case 142:
		return std::string("CallStaticVoidMethodV");
	case 143:
		return std::string("CallStaticVoidMethodA");
	case 144:
		return std::string("GetStaticFieldID");
	case 145:
		return std::string("GetStaticObjectField");
	case 146:
		return std::string("GetStaticBooleanField");
	case 147:
		return std::string("GetStaticByteField");
	case 148:
		return std::string("GetStaticCharField");
	case 149:
		return std::string("GetStaticShortField");
	case 150:
		return std::string("GetStaticIntField");
	case 151:
		return std::string("GetStaticLongField");
	case 152:
		return std::string("GetStaticFloatField");
	case 153:
		return std::string("GetStaticDoubleField");
	case 154:
		return std::string("SetStaticObjectField");
	case 155:
		return std::string("SetStaticBooleanField");
	case 156:
		return std::string("SetStaticByteField");
	case 157:
		return std::string("SetStaticCharField");
	case 158:
		return std::string("SetStaticShortField");
	case 159:
		return std::string("SetStaticIntField");
	case 160:
		return std::string("SetStaticLongField");
	case 161:
		return std::string("SetStaticFloatField");
	case 162:
		return std::string("SetStaticDoubleField");
	case 163:
		return std::string("NewString");
	case 164:
		return std::string("GetStringLength");
	case 165:
		return std::string("GetStringChars");
	case 166:
		return std::string("ReleaseStringChars");
	case 167:
		return std::string("NewStringUTF");
	case 168:
		return std::string("GetStringUTFLength");
	case 169:
		return std::string("GetStringUTFChars");
	case 170:
		return std::string("ReleaseStringUTFChars");
	case 171:
		return std::string("GetArrayLength");
	case 172:
		return std::string("NewObjectArray");
	case 173:
		return std::string("GetObjectArrayElement");
	case 174:
		return std::string("SetObjectArrayElement");
	case 175:
		return std::string("NewBooleanArray");
	case 176:
		return std::string("NewByteArray");
	case 177:
		return std::string("NewCharArray");
	case 178:
		return std::string("NewShortArray");
	case 179:
		return std::string("NewIntArray");
	case 180:
		return std::string("NewLongArray");
	case 181:
		return std::string("NewFloatArray");
	case 182:
		return std::string("NewDoubleArray");
	case 183:
		return std::string("GetBooleanArrayElements");
	case 184:
		return std::string("GetByteArrayElements");
	case 185:
		return std::string("GetCharArrayElements");
	case 186:
		return std::string("GetShortArrayElements");
	case 187:
		return std::string("GetIntArrayElements");
	case 188:
		return std::string("GetLongArrayElements");
	case 189:
		return std::string("GetFloatArrayElements");
	case 190:
		return std::string("GetDoubleArrayElements");
	case 191:
		return std::string("ReleaseBooleanArrayElements");
	case 192:
		return std::string("ReleaseByteArrayElements");
	case 193:
		return std::string("ReleaseCharArrayElements");
	case 194:
		return std::string("ReleaseShortArrayElements");
	case 195:
		return std::string("ReleaseIntArrayElements");
	case 196:
		return std::string("ReleaseLongArrayElements");
	case 197:
		return std::string("ReleaseFloatArrayElements");
	case 198:
		return std::string("ReleaseDoubleArrayElements");
	case 199:
		return std::string("GetBooleanArrayRegion");
	case 200:
		return std::string("GetByteArrayRegion");
	case 201:
		return std::string("GetCharArrayRegion");
	case 202:
		return std::string("GetShortArrayRegion");
	case 203:
		return std::string("GetIntArrayRegion");
	case 204:
		return std::string("GetLongArrayRegion");
	case 205:
		return std::string("GetFloatArrayRegion");
	case 206:
		return std::string("GetDoubleArrayRegion");
	case 207:
		return std::string("SetBooleanArrayRegion");
	case 208:
		return std::string("SetByteArrayRegion");
	case 209:
		return std::string("SetCharArrayRegion");
	case 210:
		return std::string("SetShortArrayRegion");
	case 211:
		return std::string("SetIntArrayRegion");
	case 212:
		return std::string("SetLongArrayRegion");
	case 213:
		return std::string("SetFloatArrayRegion");
	case 214:
		return std::string("SetDoubleArrayRegion");
	case 215:
		return std::string("RegisterNatives");
	case 216:
		return std::string("UnregisterNatives");
	case 217:
		return std::string("MonitorEnter");
	case 218:
		return std::string("MonitorExit");
	case 219:
		return std::string("GetJavaVM");
	case 220:
		return std::string("GetStringRegion");
	case 221:
		return std::string("GetStringUTFRegion");
	case 222:
		return std::string("GetPrimitiveArrayCritical");
	case 223:
		return std::string("ReleasePrimitiveArrayCritical");
	case 224:
		return std::string("GetStringCritical");
	case 225:
		return std::string("ReleaseStringCritical");
	case 226:
		return std::string("NewWeakGlobalRef");
	case 227:
		return std::string("DeleteWeakGlobalRef");
	case 228:
		return std::string("ExceptionCheck");
	case 229:
		return std::string("NewDirectByteBuffer");
	case 230:
		return std::string("GetDirectBufferAddress");
	case 231:
		return std::string("GetDirectBufferCapacity");
	case 232:
		return std::string("GetObjectRefType");
	default:
		return std::string("Not Find");
	}
}
