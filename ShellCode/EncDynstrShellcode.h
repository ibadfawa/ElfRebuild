/* 
 * File:   EncDynstrShellcode.h
 * Author: AngelToms
 *
 */

#ifndef ENC_DYNSTR_SHELLCODE_H
#define	ENC_DYNSTR_SHELLCODE_H

#include "../ExElf.h"
#include "../QupLog.h"

#ifdef	__cplusplus
extern "C" {
#endif
    /////NOTE 现在的版本是方案二，添加一个新的dynstr，
    /////所以shellcode的长度为当前长度+0x14,
    /////逻辑也是按照方案二写的,如果修改方案，shellcode需要重新写

    //#ifdef __LP64__
    //#else
    //#ifdef __x86__
    //#endif
    //
    //#endif
    //#ifdef __arm__
#ifdef DEBUG_TEST
    char enc_dynstr_shellcode[] = {
        0xE0, 0x47, 0x2D, 0xE9,
        /////////////NOP///////
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        0x00, 0xF0, 0x20, 0xE3,
        //////////////NOP///////
        0xE0, 0x87, 0xBD, 0xE8,
    };
#else
    //不带clear cache 版
    //1 push {lr, r5, r6, r7, r8 , r9, r10}
    //2 sub r10, pc , #12  @ fp addr
    //3 ldr r9 ,[pc ,#68] @ shellcodeaddr
    //4 sub r10, r10 , r9 @ base = fp - shellcodeaddr
    //5 ldr r9, [pc, #60] @ dynstraddr
    //6 ldr r8, [pc, #60] @ old dynstr addr
    //7 ldr r7, [pc, #60] @ dynstrlen
    //8 add r8 , r8, r10  @ old dynstraddr = base + vaddr
    //9 add r9 , r9, r10  @ vmdynstraddr = base + vaddr
    //10 mov r0, r8 @old addr
    //11 mov r1, r9 @new addr
    //12 mov r2, r7 @len
    //13 mov r3, #0
    //14 mov r6, #0
    //15 ldrb r6 , [r0, +r3]
    //16 eor r5, r6, #0x12
    //17 strb r5, [r1, +r3]
    //18 add r3, r3, #1
    //19 cmp r3 , r2
    //20 blt F8FFFFBA
    //21 pop {r10, r9, r8, r7, r6, r5, pc} ---old 21
    //22 @shellcodeaddr
    //23 @dynstraddr
    //24 @olddynstraddr
    //25 @dynstrlen
    //26 @dynsymaddr
    //    char enc_dynstr_shellcode[] = {
    //        0xE0, 0x47, 0x2D, 0xE9,
    //        0x0C, 0xA0, 0x4F, 0xE2,
    //        0x44, 0x90, 0x9F, 0xE5,
    //        0x09, 0xA0, 0x4A, 0xE0,
    //        0x40, 0x90, 0x9F, 0xE5,
    //        0x40, 0x80, 0x9F, 0xE5,
    //        0x40, 0x70, 0x9F, 0xE5,
    //        0x0A, 0x80, 0x88, 0xE0,
    //        0x0A, 0x90, 0x89, 0xE0,
    //        0x08, 0x00, 0xA0, 0xE1,
    //        0x09, 0x10, 0xA0, 0xE1,
    //        0x07, 0x20, 0xA0, 0xE1,
    //        0x00, 0x30, 0xA0, 0xE3,
    //        0x00, 0x60, 0xA0, 0xE3,
    //        0x03, 0x60, 0xD0, 0xE7,
    //        0x12, 0x50, 0x26, 0xE2,
    //        0x03, 0x50, 0xC1, 0xE7,
    //        0x01, 0x30, 0x83, 0xE2,
    //        0x02, 0x00, 0x53, 0xE1,
    //        0xF8, 0xFF, 0xFF, 0xBA,
    //        0xE0, 0x87, 0xBD, 0xE8,
    //    };

    //带clear cache 版
    //1 push {lr, r4, r5, r6, r7, r8 , r9, r10}
    //2 sub r10, pc , #12   @ fp addr
    //3 ldr r9 ,[pc ,#0x64] @ shellcodeaddr
    //4 sub r10, r10 , r9   @ base = fp - shellcodeaddr
    //5 ldr r9, [pc, #0x60] @ dynstraddr
    //6 ldr r8, [pc, #0x60] @ old dynstr addr
    //7 ldr r7, [pc, #0x60] @ dynstrlen
    //8 ldr r4, [pc, #0x4c] @ __ARM_NR_cacheflush
    //9 add r8, r8, r10     @ old dynstraddr = base + vold addr
    //10 add r9, r9, r10     @ vmdynstraddr = base + vaddr
    //10 mov r0, r8          @ old addr
    //11 mov r1, r9          @ new addr
    //12 mov r2, r7          @ len
    //13 mov r3, #0          @ i
    //14 mov r6, #0          @ tmp 
    //15 ldrb r6, [r0, +r3]  @ tmp = olddynstr + i
    //16 eor r5, r6, #0x12   @ xor tmp
    //17 strb r5, [r1, +r3]  @ set dynstr + i = tmp
    //18 add r3, r3, #1      @ i++
    //20 cmp r3, r2          @ compare i , dynstr len
    //21 blt F8FFFFBA        @ blx -8
    //22 mov r0, r9          @ clear cache, begin
    //23 add r10, r9, r7     @ end = begin + len
    //24 mov r1, r10         @ set r1 = end
    //25 mov r7, r4          @ r7 = __ARM_NR_cacheflush
    //26 mov r2 , #0x0
    //27 svc 0x00000000
    //28 pop {r10, r9, r8, r7, r6, r5, r4, pc}
    //data
    //29 @__ARM_NR_cacheflush
    //add tail
    //30 @shellcodeaddr
    //31 @dynstraddr
    //32 @olddynstraddr
    //33 @dynstrlen
    //34 @dynsymaddr
    char enc_dynstr_shellcode[] = {
        0xF0, 0x47, 0x2D, 0xE9,
        0x0C, 0xA0, 0x4F, 0xE2,
        0x64, 0x90, 0x9F, 0xE5,
        0x09, 0xA0, 0x4A, 0xE0,
        0x60, 0x90, 0x9F, 0xE5,
        0x60, 0x80, 0x9F, 0xE5,
        0x60, 0x70, 0x9F, 0xE5,
        0x4C, 0x40, 0x9F, 0xE5,
        0x0A, 0x80, 0x88, 0xE0,
        0x0A, 0x90, 0x89, 0xE0,
        0x08, 0x00, 0xA0, 0xE1,
        0x09, 0x10, 0xA0, 0xE1,
        0x07, 0x20, 0xA0, 0xE1,
        0x00, 0x30, 0xA0, 0xE3,
        0x00, 0x60, 0xA0, 0xE3,
        0x03, 0x60, 0xD0, 0xE7,
        0x12, 0x50, 0x26, 0xE2,
        0x03, 0x50, 0xC1, 0xE7,
        0x01, 0x30, 0x83, 0xE2,
        0x02, 0x00, 0x53, 0xE1,
        0xF8, 0xFF, 0xFF, 0xBA,
        //clear cache begin
        0x09, 0x00, 0xA0, 0xE1,
        0x07, 0xA0, 0x89, 0xE0,
        0x0A, 0x10, 0xA0, 0xE1,
        0x04, 0x70, 0xA0, 0xE1,
        0x00, 0x20, 0xA0, 0xE3,
        0x00, 0x00, 0x00, 0xEF,
        //clear cache end
        0xF0, 0x87, 0xBD, 0xE8,
        0x02, 0x00, 0x0f, 0x00, //__ARM_NR_cacheflush
    };
#endif
    //#endif

    __inline__ int scdynSZ() {
        int sz = sizeof (enc_dynstr_shellcode);
        QUP_LOGI("[+] shell code size = %d", sz);
        return sz;
    }
#ifdef	__cplusplus
}
#endif

#endif	/* ENC_DYNSTR_SHELLCODE_H */

